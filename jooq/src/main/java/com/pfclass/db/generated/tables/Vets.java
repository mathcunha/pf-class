/*
 * This file is generated by jOOQ.
 */
package com.pfclass.db.generated.tables;


import com.pfclass.db.generated.Indexes;
import com.pfclass.db.generated.Keys;
import com.pfclass.db.generated.Petclinic;
import com.pfclass.db.generated.tables.records.VetsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Vets extends TableImpl<VetsRecord> {

    private static final long serialVersionUID = 1291466573;

    /**
     * The reference instance of <code>petclinic.vets</code>
     */
    public static final Vets VETS = new Vets();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VetsRecord> getRecordType() {
        return VetsRecord.class;
    }

    /**
     * The column <code>petclinic.vets.id</code>.
     */
    public final TableField<VetsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>petclinic.vets.first_name</code>.
     */
    public final TableField<VetsRecord, String> FIRST_NAME = createField("first_name", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>petclinic.vets.last_name</code>.
     */
    public final TableField<VetsRecord, String> LAST_NAME = createField("last_name", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>petclinic.vets.version</code>.
     */
    public final TableField<VetsRecord, Long> VERSION = createField("version", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>petclinic.vets</code> table reference
     */
    public Vets() {
        this(DSL.name("vets"), null);
    }

    /**
     * Create an aliased <code>petclinic.vets</code> table reference
     */
    public Vets(String alias) {
        this(DSL.name(alias), VETS);
    }

    /**
     * Create an aliased <code>petclinic.vets</code> table reference
     */
    public Vets(Name alias) {
        this(alias, VETS);
    }

    private Vets(Name alias, Table<VetsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Vets(Name alias, Table<VetsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Vets(Table<O> child, ForeignKey<O, VetsRecord> key) {
        super(child, key, VETS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Petclinic.PETCLINIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.VETS_LAST_NAME, Indexes.VETS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<VetsRecord> getPrimaryKey() {
        return Keys.KEY_VETS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<VetsRecord>> getKeys() {
        return Arrays.<UniqueKey<VetsRecord>>asList(Keys.KEY_VETS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Vets as(String alias) {
        return new Vets(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Vets as(Name alias) {
        return new Vets(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Vets rename(String name) {
        return new Vets(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Vets rename(Name name) {
        return new Vets(name, null);
    }
}
