/*
 * This file is generated by jOOQ.
 */
package com.pfclass.db.generated.tables.records;


import com.pfclass.db.generated.tables.Visits;

import java.sql.Date;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Index;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "visits", schema = "petclinic", indexes = {
    @Index(name = "pet_id", columnList = "pet_id ASC"),
    @Index(name = "PRIMARY", unique = true, columnList = "id ASC")
})
public class VisitsRecord extends UpdatableRecordImpl<VisitsRecord> implements Record4<Integer, Integer, Date, String> {

    private static final long serialVersionUID = 208773574;

    /**
     * Setter for <code>petclinic.visits.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>petclinic.visits.id</code>.
     */
    @Id
    @Column(name = "id", unique = true, nullable = false, precision = 10)
    @NotNull
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>petclinic.visits.pet_id</code>.
     */
    public void setPetId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>petclinic.visits.pet_id</code>.
     */
    @Column(name = "pet_id", nullable = false, precision = 10)
    @NotNull
    public Integer getPetId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>petclinic.visits.visit_date</code>.
     */
    public void setVisitDate(Date value) {
        set(2, value);
    }

    /**
     * Getter for <code>petclinic.visits.visit_date</code>.
     */
    @Column(name = "visit_date")
    public Date getVisitDate() {
        return (Date) get(2);
    }

    /**
     * Setter for <code>petclinic.visits.description</code>.
     */
    public void setDescription(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>petclinic.visits.description</code>.
     */
    @Column(name = "description", length = 255)
    @Size(max = 255)
    public String getDescription() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, Integer, Date, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, Integer, Date, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return Visits.VISITS.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field2() {
        return Visits.VISITS.PET_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Date> field3() {
        return Visits.VISITS.VISIT_DATE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return Visits.VISITS.DESCRIPTION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component2() {
        return getPetId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Date component3() {
        return getVisitDate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component4() {
        return getDescription();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value2() {
        return getPetId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Date value3() {
        return getVisitDate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getDescription();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VisitsRecord value1(Integer value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VisitsRecord value2(Integer value) {
        setPetId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VisitsRecord value3(Date value) {
        setVisitDate(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VisitsRecord value4(String value) {
        setDescription(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VisitsRecord values(Integer value1, Integer value2, Date value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached VisitsRecord
     */
    public VisitsRecord() {
        super(Visits.VISITS);
    }

    /**
     * Create a detached, initialised VisitsRecord
     */
    public VisitsRecord(Integer id, Integer petId, Date visitDate, String description) {
        super(Visits.VISITS);

        set(0, id);
        set(1, petId);
        set(2, visitDate);
        set(3, description);
    }
}
