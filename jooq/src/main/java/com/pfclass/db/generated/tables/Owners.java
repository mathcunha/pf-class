/*
 * This file is generated by jOOQ.
 */
package com.pfclass.db.generated.tables;


import com.pfclass.db.generated.Indexes;
import com.pfclass.db.generated.Keys;
import com.pfclass.db.generated.Petclinic;
import com.pfclass.db.generated.tables.records.OwnersRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Owners extends TableImpl<OwnersRecord> {

    private static final long serialVersionUID = 1745580691;

    /**
     * The reference instance of <code>petclinic.owners</code>
     */
    public static final Owners OWNERS = new Owners();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OwnersRecord> getRecordType() {
        return OwnersRecord.class;
    }

    /**
     * The column <code>petclinic.owners.id</code>.
     */
    public final TableField<OwnersRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>petclinic.owners.first_name</code>.
     */
    public final TableField<OwnersRecord, String> FIRST_NAME = createField("first_name", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>petclinic.owners.last_name</code>.
     */
    public final TableField<OwnersRecord, String> LAST_NAME = createField("last_name", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>petclinic.owners.address</code>.
     */
    public final TableField<OwnersRecord, String> ADDRESS = createField("address", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>petclinic.owners.city</code>.
     */
    public final TableField<OwnersRecord, String> CITY = createField("city", org.jooq.impl.SQLDataType.VARCHAR(80), this, "");

    /**
     * The column <code>petclinic.owners.telephone</code>.
     */
    public final TableField<OwnersRecord, String> TELEPHONE = createField("telephone", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * Create a <code>petclinic.owners</code> table reference
     */
    public Owners() {
        this(DSL.name("owners"), null);
    }

    /**
     * Create an aliased <code>petclinic.owners</code> table reference
     */
    public Owners(String alias) {
        this(DSL.name(alias), OWNERS);
    }

    /**
     * Create an aliased <code>petclinic.owners</code> table reference
     */
    public Owners(Name alias) {
        this(alias, OWNERS);
    }

    private Owners(Name alias, Table<OwnersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Owners(Name alias, Table<OwnersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Owners(Table<O> child, ForeignKey<O, OwnersRecord> key) {
        super(child, key, OWNERS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Petclinic.PETCLINIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.OWNERS_LAST_NAME, Indexes.OWNERS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<OwnersRecord> getPrimaryKey() {
        return Keys.KEY_OWNERS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<OwnersRecord>> getKeys() {
        return Arrays.<UniqueKey<OwnersRecord>>asList(Keys.KEY_OWNERS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Owners as(String alias) {
        return new Owners(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Owners as(Name alias) {
        return new Owners(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Owners rename(String name) {
        return new Owners(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Owners rename(Name name) {
        return new Owners(name, null);
    }
}
