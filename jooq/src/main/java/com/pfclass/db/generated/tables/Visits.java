/*
 * This file is generated by jOOQ.
 */
package com.pfclass.db.generated.tables;


import com.pfclass.db.generated.Indexes;
import com.pfclass.db.generated.Keys;
import com.pfclass.db.generated.Petclinic;
import com.pfclass.db.generated.tables.records.VisitsRecord;

import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Visits extends TableImpl<VisitsRecord> {

    private static final long serialVersionUID = 322490134;

    /**
     * The reference instance of <code>petclinic.visits</code>
     */
    public static final Visits VISITS = new Visits();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VisitsRecord> getRecordType() {
        return VisitsRecord.class;
    }

    /**
     * The column <code>petclinic.visits.id</code>.
     */
    public final TableField<VisitsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>petclinic.visits.pet_id</code>.
     */
    public final TableField<VisitsRecord, Integer> PET_ID = createField("pet_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>petclinic.visits.visit_date</code>.
     */
    public final TableField<VisitsRecord, Date> VISIT_DATE = createField("visit_date", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>petclinic.visits.description</code>.
     */
    public final TableField<VisitsRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>petclinic.visits</code> table reference
     */
    public Visits() {
        this(DSL.name("visits"), null);
    }

    /**
     * Create an aliased <code>petclinic.visits</code> table reference
     */
    public Visits(String alias) {
        this(DSL.name(alias), VISITS);
    }

    /**
     * Create an aliased <code>petclinic.visits</code> table reference
     */
    public Visits(Name alias) {
        this(alias, VISITS);
    }

    private Visits(Name alias, Table<VisitsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Visits(Name alias, Table<VisitsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Visits(Table<O> child, ForeignKey<O, VisitsRecord> key) {
        super(child, key, VISITS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Petclinic.PETCLINIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.VISITS_PET_ID, Indexes.VISITS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<VisitsRecord> getPrimaryKey() {
        return Keys.KEY_VISITS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<VisitsRecord>> getKeys() {
        return Arrays.<UniqueKey<VisitsRecord>>asList(Keys.KEY_VISITS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<VisitsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<VisitsRecord, ?>>asList(Keys.VISITS_IBFK_1);
    }

    public Pets pets() {
        return new Pets(this, Keys.VISITS_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Visits as(String alias) {
        return new Visits(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Visits as(Name alias) {
        return new Visits(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Visits rename(String name) {
        return new Visits(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Visits rename(Name name) {
        return new Visits(name, null);
    }
}
